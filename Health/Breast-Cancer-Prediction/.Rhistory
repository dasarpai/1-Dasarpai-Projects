install.packages("PANDA")
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
library (pastecs)
stat.desc (wbcd['radius_mean'])
clear()
c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
var <- c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
library(magrittr)
c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
c(1,2,3,4) %>% Map(sqrt, .)
var <- c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
var(1,2,3)
var <- function(a,b,c){
return (a+b+c)
}
var(1,2,3)
var <- function(a,b,c){
x= sqrt(b)
a = a+x
return (a+b+c)
}
var(1,2,3)
setwd("D:/github/1-Projects/Projects-ML/Health-MLK04-BreastCancer")
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
wbcd$X <- NULL
wbcd <- wbcd[,-1]
wbcd$diagnosis <- factor(ifelse(wbcd$diagnosis=="B","Benign","Malignant"))
str(wbcd)
library(PerformanceAnalytics)
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
warnings()
library(ggpairs)
install.packages("ggpairs")
library(ggpairs)
library(ggplot2)
library(ggpairs)
library(ggpairs)
remove.packages("ggplot2")
install.packages("ggplot2")
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
ggcorr(wbcd[,c(2:11)], name = "corr", label = TRUE)+
theme(legend.position="none")+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
help(stat.desc)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
Hmisc::describe(wbcd)
Hmisc::describe(wbcd['radius_mean'])
library (pastecs)
stat.desc (wbcd['radius_mean'])
stat.desc(wbcd[,2:5], basic=TRUE, desc=TRUE, norm=TRUE, p=0.95)
library(dummies)
install.packages("dummy")
library(dummies)
get.dummy(wbcd, 'diagnosis')
data( iris )
d <- dummy.data.frame( iris )
library(dummy)
data( iris )
d <- dummy.data.frame( iris )
dummy.data.frame(iris)
library(PerformanceAnalytics)
clear
clear()
cls()
exit()
clean()
library(PerformanceAnalytics)
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
library(ggpairs)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
library(ggpairs)
install.packages("GGally")
library(ggpairs)
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
library(GGally)
library(ggpairs)
library(ggpairs)
library(ggpairs)
install.packages("ggpairs")
detach("package:GGally", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
library(GGally)
library(ggpairs)
install.packages("ggplot2", dependencies=TRUE)
install.packages("ggplot2", dependencies = TRUE)
library(ggpairs)
install.packages("GGally", dependencies=TRUE)
library(ggpairs)
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("GGally")
ggpairs(data)+theme_bw()
ggpairs(data)+theme_bw()
ggpairs(data)+theme_bw()
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
th
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
ggcorr(wbcd[,c(2:11)], name = "corr", label = TRUE)+
theme(legend.position="none")+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
help(stat.desc)
setwd("D:/github/1-Projects/Projects-ML/Health-MLK04-BreastCancer")
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
wbcd$X <- NULL
View(wbcd)
View(wbcd)
View(wbcd)
View(wbcd)
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
View(wbcd)
wbcd$X <- NULL
View(wbcd)
wbcd <- wbcd[,-1]
View(wbcd)
View(wbcd)
wbcd$diagnosis <- factor(ifelse(wbcd$diagnosis=="B","Benign","Malignant"))
View(wbcd)
str(wbcd)
library(PerformanceAnalytics)
detach("package:PerformanceAnalytics", unload = TRUE)
library(PerformanceAnalytics)
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
library(ggpairs)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("GGally")
install.packages("ggplot2")
library(ggpairs)
install.packages("GGally")
library("GGally")
library(ggpairs)
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
View(wbcd)
Hmisc::describe(wbcd['radius_mean'])
Hmisc::describe(wbcd)
Hmisc::describe(wbcd)
stat.desc (wbcd['radius_mean'])
library (pastecs)
stat.desc (wbcd['radius_mean'])
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
wbcd$X <- NULL
wbcd <- wbcd[,-1]
wbcd$diagnosis <- factor(ifelse(wbcd$diagnosis=="B","Benign","Malignant"))
str(wbcd)
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
library(PerformanceAnalytics)
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75), lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75),
lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
ggcorr(wbcd[,c(2:11)], name = "corr", label = TRUE)+
theme(legend.position="none")+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
get.dummy(wbcd, 'diagnosis')
library(dummies)
install.packages("dummy")
library(dummies)
get.dummy(wbcd, 'diagnosis')
library(dummy)
get.dummy(wbcd, 'diagnosis')
library(fastDummies)
get.dummy(wbcd, 'diagnosis')
install.packages("dummies")
get.dummy(wbcd, 'diagnosis')
get.dummy(wbcd, 'diagnosis')
library(dummies)
#You may need to use the setwd(directory-name) command to
#change your working directory to wherever you saved the csv.
#Use getwd() to see what your current directory is.
dataset = read.csv("data-marketing-budget-12mo.csv", header=T,
colClasses = c("numeric", "numeric", "numeric"))
#You may need to use the setwd(directory-name) command to
#change your working directory to wherever you saved the csv.
#Use getwd() to see what your current directory is.
dataset = read.csv("D:/github/R-Projects/data-marketing-budget-12mo.csv", header=T,
colClasses = c("numeric", "numeric", "numeric"))
simple.fit = lm(Sales~Spend, data=dataset)
summary(simple.fit)
multi.fit = lm(Sales~Spend+Month, data=dataset)
summary(multi.fit)
View(dataset)
#Analyzing Residuals
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(simple.fit$resid~dataset$Spend[order(dataset$Spend)],
main="Spend x Residuals\nfor Simple Regression",
xlab="Marketing Spend", ylab="Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(simple.fit$resid, main="Histogram of Residuals",
ylab="Residuals")
#Q-Q Plot
qqnorm(simple.fit$resid)
qqline(simple.fit$resid)
help(abline)
#Analyzing Residuals
layout(matrix(c(1,1,2,3),2,2,byrow=T))
#Spend x Residuals Plot
plot(simple.fit$resid~dataset$Spend[order(dataset$Spend)],
main="Spend x Residuals\nfor Simple Regression",
xlab="Marketing Spend", ylab="Residuals")
abline(h=0,lty=2)
#Histogram of Residuals
hist(simple.fit$resid, main="Histogram of Residuals",
ylab="Residuals")
#Q-Q Plot
qqnorm(simple.fit$resid)
qqline(simple.fit$resid)
library(fBasics)
install.packages("fBasics")
library(fBasics)
library(fBasics)
jarqueberaTest(simple.fit$resid) #Test residuals for normality
library(lmtest) #dwtest
install.packages("lmtest")
# Residuals are independent
library(lmtest) #dwtest
dwtest(simple.fit) #Test for independence of residuals
layout(matrix(c(1,2,3,4),2,2,byrow=T))
plot(multi.fit$fitted, rstudent(multi.fit),
main="Multi Fit Studentized Residuals",
xlab="Predictions",ylab="Studentized Resid",
ylim=c(-2.5,2.5))
abline(h=0, lty=2)
plot(dataset$Month, multi.fit$resid,
main="Residuals by Month",
xlab="Month",ylab="Residuals")
abline(h=0,lty=2)
hist(multi.fit$resid,main="Histogram of Residuals")
qqnorm(multi.fit$resid)
qqline(multi.fit$resid)
library(fBasics)
jarqueberaTest(multi.fit$resid)
library(lmtest) #dwtest
dwtest(multi.fit) #Test for in
setwd("D:/github/1-Projects/Projects-ML/Health-MLK04-BreastCancer")
wbcd <- read.csv("BreastCancer-data.csv", header=T, stringsAsFactors=F)
wbcd$X <- NULL
wbcd <- wbcd[,-1]
wbcd$diagnosis <- factor(ifelse(wbcd$diagnosis=="B","Benign","Malignant"))
str(wbcd)
library(PerformanceAnalytics)
chart.Correlation(wbcd[,c(2:11)],histogram=TRUE, col="grey10", pch=1, main="Cancer Mean")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
library("GGally")
library(ggpairs)
ggpairs(wbcd[,c(2:11,1)], aes(color=diagnosis, alpha=0.75),
lower=list(continuous="smooth"))+ theme_bw()+
labs(title="Cancer Mean")+
theme(plot.title=element_text(face='bold',color='black',hjust=0.5,size=10))
test1 <- data.frame(numbers = 1:3,
gender  = c("male", "male", "female"),
animals = c("dog", "dog", "cat"),
dates   = as.Date(c("2012-01-01", "2011-12-31",
"2012-01-01")),
stringsAsFactors = FALSE)
knitr::kable(test1)
results <- fastDummies::dummy_cols(test1['gender'])
knitr::kable(results)
library(magrittr)
c(1,2,3,4) %>% Map(sqrt, .)
var <- c(1,2,3,4) %>% Map(sqrt, .) %>%  Reduce(sum, .)
var <- function(a,b,c){
x= sqrt(b)
a = a+x
return (a+b+c)
}
var(1,2,3)
